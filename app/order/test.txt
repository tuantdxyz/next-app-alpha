// app/order/page.tsx
import { useEffect, useRef, useState } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';
import Image from 'next/image';
import QRCodeImage from '../media/QRCode_example.png';
import styles from '../style/orderPage.module.css';

const OrderPage = () => {
  const router = useRouter();
  const searchParams = useSearchParams();
  const plan = searchParams.get('plan');
  const price = searchParams.get('price');

  const productName = plan;
  const productPrice = price;

  const [paymentStatus, setPaymentStatus] = useState('Unpaid');
  const [loading, setLoading] = useState(false);
  const [timeRemaining, setTimeRemaining] = useState(60); // Thời gian chờ tối đa 60 giây
  const intervalRef = useRef<ReturnType<typeof setInterval> | null>(null);

  const checkPaymentStatus = async () => {
    setLoading(true);
    
    const fetchPaymentStatus = async () => {
      try {
        const response = await fetch('/order'); // Gọi API payment-status
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const data = await response.json();
        return data.status; // Trả về trạng thái
      } catch (error) {
        console.error('Có lỗi xảy ra khi gọi API:', error);
        return null; // Trả về null nếu có lỗi
      }
    };

    let timeoutId = setTimeout(() => {
      clearInterval(intervalRef.current!);
      setPaymentStatus('Cancelled'); // Hủy đơn hàng sau 60 giây
      setLoading(false);
    }, 60000); // Thời gian tối đa 60 giây

    intervalRef.current = setInterval(async () => {
      const status = await fetchPaymentStatus(); // Gọi API để lấy trạng thái
      if (status) {
        setPaymentStatus(status); // Cập nhật trạng thái
        if (status === 'Paid' || status === 'Cancelled') {
          clearInterval(intervalRef.current!); // Dừng interval nếu đã có kết quả
          clearTimeout(timeoutId); // Dừng timeout nếu có kết quả
          setLoading(false);
        }
      }
      
      setTimeRemaining((prevTime) => {
        if (prevTime <= 1) {
          clearInterval(intervalRef.current!);
          setPaymentStatus('Cancelled'); // Cập nhật trạng thái thành 'Cancelled'
          return 0; // Đảm bảo không có giá trị âm
        }
        return prevTime - 1;
      });
    }, 2000); // Kiểm tra mỗi 2 giây
  };

  // Kiểm tra trạng thái thanh toán khi component được mount
  useEffect(() => {
    checkPaymentStatus();
    
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current); // Dừng interval khi component unmount
      }
    };
  }, []);

  return (
    <div className={styles.container}>
      <form className={styles.form} onSubmit={(e) => e.preventDefault()}>
        <h1>Thông tin đặt hàng</h1>
        <h2>Product: {productName}</h2>
        <p>Price: ${productPrice} per month</p>

        {paymentStatus === 'Unpaid' && (
          <div className={styles.paymentWaitingScreen}>
            <div className={styles.paymentWaitingContent}>
              <Image src={QRCodeImage} alt="QR Code" width={300} height={300} />
              <h2>Vui lòng quét mã QR để thanh toán</h2>
              <p>Hệ thống đang chờ xác nhận thanh toán của bạn.</p>
              {loading && <div className={styles.loader}></div>}
              <p>Thời gian còn lại: {timeRemaining} giây</p>
            </div>
          </div>
        )}

        {paymentStatus === 'Paid' && (
          <div className={styles.successPayBox}>
            <h2>Cảm ơn!</h2>
            <p>Thanh toán đã được xác nhận.</p>
            <button onClick={() => router.push('/')} className={styles.closeButton}>
              Đóng
            </button>
          </div>
        )}

        {paymentStatus === 'Cancelled' && (
          <div className={styles.failurePayBox}>
            <h2>Đơn hàng đã bị hủy</h2>
            <p>Vui lòng thử lại.</p>
            <button onClick={() => router.push('/')} className={styles.closeButton}>
              Về trang chủ
            </button>
          </div>
        )}
      </form>
    </div>
  );
};

export default OrderPage;